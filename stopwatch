# template for "Stopwatch: The Game"
import simplegui


# define global variables
time=0
timer_active=False
score=0
tries=0
message=''
message_color="Yellow"

# define helper function format that converts time
# in tenths of seconds into formatted string A:BC.D
#def init():
#    pass

def format(t):
    global message
    tstr=str(t)
    time_string='0:00.0'
    if t==0:
        return time_string
    elif t>=6000:
        reset_handler()
        message="Time's up"
    elif len(tstr)==1:
            time_string='0:00.'+tstr
    elif len(tstr)==2:
        time_string='0:0'+tstr[0]+'.'+tstr[1]
    elif len(tstr)>=3:
        if t<=599:
            time_string='0:'+tstr[0:2]+'.'+tstr[2]
        else:
            minutes=t//600
            rest=str(t%600)
            time_string=str(minutes)+':'
            if len(rest)==1:
                time_string=time_string+'00.'+rest
            elif len(rest)==2:
                time_string=time_string+'0'+rest[0]+'.'+rest[1]
            elif len(rest)==3:
                time_string=time_string+rest[0:2]+'.'+rest[2]
            else:
                print "Time formating error 1"
    else:
                print tstr
                print "Time formating error 2"
    return time_string
#print format(11)# = 0:01.1
#print format(321)# = 0:32.1
#print format(613)# = 1:01.3    
#print format(1300)
    
# define event handlers for buttons; "Start", "Stop", "Reset"
def key_handler(key):
    if key== simplegui.KEY_MAP['space']:
        if timer_active==True:
            stop_handler()
        elif timer_active==False:
            start_handler()
    elif key== simplegui.KEY_MAP['q'] or key== simplegui.KEY_MAP['Q']:
        reset_handler()
    else:
        print "Press 'SPACE' to START/STOP the timer. Press 'q' to reset the timer."
    
    
def start_handler():
    global timer_active
    timer.start()
    message_timer.start()
    timer_active=True
    
def stop_handler():
    global tries, score, message, timer_active, message_color
    if timer_active==True:
        timer.stop()
        timer_active=False
        tries=tries+1
        #print "Parado a tiempo: " +str(time) + ' message: ' +message
        if str(time)[-1]=="0":
            score=score+1
            message="PERFECT!"
            message_color="Green"
        elif str(time)[-1]=="9" or str(time)[-1]=="1":
            message="Almost!"
            message_color="Yellow"
            
def reset_handler():
    global time, timer_active, score, tries,message
    timer.stop()
    time=0
    timer_active=False
    score=0
    tries=0
    message=''

# define event handler for timer with 0.1 sec interval
def timer_handler():
    global time
    time=time+1
    
def message_timer_handler():
    global message
    message=''
    
# define draw handler
def draw_handler(canvas):
    #print "time: " +str(time)+" score: " +str(score)+" tries: " +str(tries)+" timer active: " +str(timer_active)
    stopwatch=format(time)
    canvas.draw_text(stopwatch, (30, 120), 70, "White", "monospace")
    score_text=str(score)+'/'+str(tries)
    canvas.draw_text(score_text, (240, 30), 30, "Yellow")
    canvas.draw_text(message, (50, 180), 50, message_color)

# create frame
frame=simplegui.create_frame("Stopwatch", 300, 200)

# register event handlers
start=frame.add_button("Start",start_handler)
stop=frame.add_button("Stop",stop_handler)
frame.set_keydown_handler(key_handler)
reset=frame.add_button("Reset",reset_handler)
timer = simplegui.create_timer(100, timer_handler)
message_timer = simplegui.create_timer(1500, message_timer_handler)
frame.set_draw_handler(draw_handler)


# start frame
frame.start()
print "You can also play using 'SPACE' to START or STOP the timer.\nPress 'q' to RESET the timer\n\n"


# Please remember to review the grading rubric
