# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0.5
started  = False



class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2013.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)

#helper funcion to stop the game
def stop_game(canvas):
    global started,rock_group,missile_group
    timer.stop()
    started= False
    rock_group = set ()
    missile_group = set ()
    for item in explosion_group:
        item.kill_sprite()
    canvas.draw_image(splash_image, splash_info.get_center(), splash_info.get_size(),  [WIDTH/2,HEIGHT/2], splash_info.get_size())
    ship_thrust_sound.rewind()
    missile_sound.rewind()
    
def start_game():
    global score, lives,started, my_ship
    started = True
    score = 0
    lives = 3
    timer.start()
    my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)

    
   
# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.thrust= False
        
    def get_pos(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
     
    def draw(self,canvas):
        if self.thrust:
            canvas.draw_image(self.image, [self.image_center[0]+self.image_size[0],self.image_center[1]], self.image_size, self.pos, self.image_size, self.angle )
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle )
   
    def set_angle_vel(self,vel):
        self.angle_vel = vel
    
    def set_thrust(self):
        if started == True:
            self.thrust = not self.thrust
            if self.thrust:
                ship_thrust_sound.play()
            else:
                ship_thrust_sound.rewind()
       
    def update(self):
        if started == True:
            if self.thrust:
                self.vel[0] += 0.1*angle_to_vector(self.angle)[0]
                self.vel[1] += 0.1*angle_to_vector(self.angle)[1]
            else:
                self.vel[0]*=0.99
                self.vel[1]*=0.99
                
            self.pos[0]+= self.vel[0]
            self.pos[1]+= self.vel[1]
            
            if self.pos[0]<0 or self.pos[0]>WIDTH:
                self.pos[0] = self.pos[0]%WIDTH
            if self.pos[1]<0 or self.pos[1]>HEIGHT:
                self.pos[1] = self.pos[1]%HEIGHT
            
            self.angle += self.angle_vel
            angle_to_vector(self.angle)  
        else:
            self.pos = [WIDTH / 2, HEIGHT / 2+100]
            self.vel = [0,0]
            self.angle_vel=0
            self.angle = 0
            self.thrust = False
            
            
    def shot(self):
        global missile_group
        if started == True:
            m_vel=[self.vel[0] + 5*angle_to_vector(self.angle)[0],self.vel[1] + 5*angle_to_vector(self.angle)[1]]
            m_pos=[self.pos[0]+math.cos(self.angle)*self.radius,self.pos[1]+math.sin(self.angle)*self.radius]        
    
            missile_group.add(Sprite(m_pos, m_vel, 0, 0, missile_image, missile_info, missile_sound))

  
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
    
    def kill_sprite(self):
        self.age = self.lifespan
        
    def get_pos(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def draw(self, canvas):
        if self.animated == True:
            sprite_pos=[self.image_center[0]+self.image_size[0]*self.age,self.image_center[1]]
            canvas.draw_image(self.image, sprite_pos, self.image_size, self.pos, self.image_size, self.angle )
        
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle )
        
    def update(self):
        self.age +=1
        if self.age <= self.lifespan:
            self.pos[0]+= self.vel[0]
            self.pos[1]+= self.vel[1]
            self.angle += self.angle_vel
            
            if self.pos[0]<0 or self.pos[0]>WIDTH:
                self.pos[0] = self.pos[0]%WIDTH
            if self.pos[1]<0 or self.pos[1]>HEIGHT:
                self.pos[1] = self.pos[1]%HEIGHT
            return False
        else:
            return True
        
    def collide(self,other_object):
        if dist(self.pos,other_object.get_pos())<= self.radius + other_object.get_radius():
            return True

#catches click events
def click(pos):
    if started == False:
        start_game()

#Catches keydown events
def keydown(key):
    if started==True:
        if key == simplegui.KEY_MAP['left']:
            my_ship.set_angle_vel(-0.1)
        elif key == simplegui.KEY_MAP['right']:
            my_ship.set_angle_vel(0.1)
        elif key == simplegui.KEY_MAP['up']:
            my_ship.set_thrust()
        elif key == simplegui.KEY_MAP['space']:
            my_ship.shot()
    
            
#Catches keyup events        
def keyup(key):
    if started==True:
        if key == simplegui.KEY_MAP['left'] or key == simplegui.KEY_MAP['right']:
            my_ship.set_angle_vel(0)
        if key == simplegui.KEY_MAP['up']:
            my_ship.set_thrust()

#process a group of objects to be draw and update
def process_sprite_group(group,canvas):
    iterable=set(group)
    for item in iterable:
        if item.update():
            group.remove(item)
        else:
            item.draw(canvas)
            
            
#processes a group of objects and check collisions with another object
def group_collide(group,other_object):
    global explosion_group
    iterable=set(group)
    collision_flag= False
    for item in iterable:
        if item.collide(other_object):
            collision_flag=True
            explosion_pos=item.get_pos()
            explosion_group.add(Sprite(explosion_pos, [0,0], 0,0, explosion_image, explosion_info,explosion_sound))
            group.remove(item)
    return collision_flag        

def group_group_collide(group_1,group_2):
    iterable=set(group_1)
    number_collisions=0
    
    for item in iterable:
        if group_collide(group_2,item):
            number_collisions +=1
            group_1.discard(item)
    return number_collisions

def draw(canvas):
    global time,score,lives
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    
    #draw UI
    canvas.draw_text('SCORE:   '+str(score), (10, 25), 20, 'White', 'sans-serif')
    canvas.draw_text('LIVES:   '+str(lives), (WIDTH-100, 25), 20, 'White', 'sans-serif')
        
    if started == False:
        stop_game(canvas)
    else:
  
        #draw rocks
        process_sprite_group(rock_group,canvas)
        
        #draw missiles
        process_sprite_group(missile_group,canvas)
        
        #draw explosions
        process_sprite_group(explosion_group,canvas)
        
        # draw ship and sprites
        my_ship.draw(canvas)
        
        
        
        # update ship and sprites
        my_ship.update()
        
        
        #checks if the ship has collide with a rock and updates the lives.
        #stops the game if necessary
        if group_collide(rock_group,my_ship):
            lives -=1
        if lives <= 0:
             #canvas.draw_text('GAME OVER', [(WIDTH / 2)-0.15*WIDTH, (HEIGHT / 2)-0.1*HEIGHT], 40, 'White', 'sans-serif')
             #canvas.draw_text('Press "S" to start a new game', [(WIDTH / 2)-0.15*WIDTH, (HEIGHT / 2)+0.1*HEIGHT], 20, 'White', 'sans-serif')
             stop_game(canvas)
           
        #checks if any missile hit any rock
        hits= group_group_collide(rock_group,missile_group)
        if hits >0:
            score = score + 100*hits
            
        
# timer handler that spawns a rock    
def rand_symbol(valor):
    flip=random.randint(0,1)
    if type(valor)== list:
        for i in range(len(valor)):
            if flip== 1:
                valor[i] = -valor[i]
            flip=random.randint(0,1)
    else:
        if flip ==1:
            valor = -valor
    
    return valor   

def rock_spawner():
    global rock_group
    
    #checks if we have reached the rock cap
    
    if len(rock_group)>=12:
        pass
    else:
    
        #generates random position
        new_pos= [random.randrange(WIDTH),random.randrange(HEIGHT)]      
        #If position is too close to the ship, we don't spawn a rock this time
        if dist(new_pos,my_ship.get_pos())<= my_ship.radius*3:
            pass
        #otherwise generates random velocity, angle and angular velocity for the rock
        else:
            new_vel= [random.randrange(1,3,1),random.randrange(1,3,1)]
            new_vel = rand_symbol(new_vel)
            
            new_angle = random.randrange(1,100,1)%(2*math.pi)   
            new_angle_vel= random.randrange(1,4,1)/100.0
            new_angle_vel=rand_symbol(new_angle_vel)
            
            #adds a new rock to the group
            rock_group.add(Sprite(new_pos, new_vel, new_angle,new_angle_vel, asteroid_image, asteroid_info))
           
    
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites

rock_group=set()
missile_group=set()
explosion_group = set()


# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)
timer = simplegui.create_timer(1000.0, rock_spawner)


# get things rolling
timer.start()
frame.start()
